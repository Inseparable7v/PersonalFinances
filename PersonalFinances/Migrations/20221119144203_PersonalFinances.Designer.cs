// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersonalFinances.Models;

namespace PersonalFinances.Migrations
{
    [DbContext(typeof(PersonalFinancesDBContext))]
    [Migration("20221119144203_PersonalFinances")]
    partial class PersonalFinances
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Latin1_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PersonalFinances.Models.Address", b =>
                {
                    b.Property<decimal>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ADDRESS_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddresMunicipality")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ADDRES_MUNICIPALITY");

                    b.Property<string>("AddressPcode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("ADDRESS_PCODE");

                    b.Property<string>("AddressPlace")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ADDRESS_PLACE");

                    b.Property<string>("AddressRegion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ADDRESS_REGION");

                    b.Property<string>("AddressText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ADDRESS_TEXT");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ADDRESS_TYPE")
                        .IsFixedLength(true);

                    b.Property<decimal>("ClientId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("CLIENT_ID");

                    b.HasKey("AddressId");

                    b.HasIndex(new[] { "ClientId", "AddressType" }, "IDX_ADDRESS_UQ")
                        .IsUnique();

                    b.ToTable("ADDRESS");
                });

            modelBuilder.Entity("PersonalFinances.Models.Client", b =>
                {
                    b.Property<decimal>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("CLIENT_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientEgn")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CLIENT_EGN");

                    b.Property<string>("ClientEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CLIENT_EMAIL");

                    b.Property<string>("ClientLastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CLIENT_LASTNAME");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CLIENT_NAME");

                    b.Property<string>("ClientPhone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CLIENT_PHONE");

                    b.Property<string>("ClientSurname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CLIENT_SURNAME");

                    b.HasKey("ClientId");

                    b.HasIndex(new[] { "ClientEgn" }, "IDX_CLIENT_UQ")
                        .IsUnique();

                    b.ToTable("CLIENT");
                });

            modelBuilder.Entity("PersonalFinances.Models.Dossier", b =>
                {
                    b.Property<decimal>("DossierNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("DOSSIER_NO")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ClientId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("CLIENT_ID");

                    b.Property<decimal?>("DossierMinBalance")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("DOSSIER_MIN_BALANCE");

                    b.Property<string>("DossierStatus")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("DOSSIER_STATUS")
                        .IsFixedLength(true);

                    b.Property<decimal>("DossierYear")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("DOSSIER_YEAR");

                    b.HasKey("DossierNo");

                    b.HasIndex(new[] { "ClientId", "DossierYear" }, "IDX_DOSSIER_UQ")
                        .IsUnique();

                    b.ToTable("DOSSIER");
                });

            modelBuilder.Entity("PersonalFinances.Models.DossierDetail", b =>
                {
                    b.Property<decimal>("DdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("DD_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DdDate")
                        .HasColumnType("date")
                        .HasColumnName("DD_DATE");

                    b.Property<string>("DdDoc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("DD_DOC");

                    b.Property<decimal>("DdValue")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("DD_VALUE");

                    b.Property<decimal>("DossierNo")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("DOSSIER_NO");

                    b.Property<decimal>("IncexpId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("INCEXP_ID");

                    b.HasKey("DdId");

                    b.HasIndex("DossierNo");

                    b.HasIndex("IncexpId");

                    b.ToTable("DOSSIER_DETAILS");
                });

            modelBuilder.Entity("PersonalFinances.Models.Expert", b =>
                {
                    b.Property<decimal>("ExpretId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("EXPRET_ID");

                    b.Property<string>("ExpertLastname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EXPERT_LASTNAME");

                    b.Property<string>("ExpertName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EXPERT_NAME");

                    b.Property<string>("ExpertSurname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EXPERT_SURNAME");

                    b.Property<string>("ExpertType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("EXPERT_TYPE")
                        .IsFixedLength(true);

                    b.HasKey("ExpretId");

                    b.ToTable("EXPERTS");
                });

            modelBuilder.Entity("PersonalFinances.Models.IncomeExpnece", b =>
                {
                    b.Property<decimal>("IncexpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("INCEXP_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IncexpName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("INCEXP_NAME");

                    b.Property<string>("IncexpType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("INCEXP_TYPE")
                        .IsFixedLength(true);

                    b.HasKey("IncexpId");

                    b.HasIndex(new[] { "IncexpName", "IncexpType" }, "IDX_INCOME_EXPENCE_UQ")
                        .IsUnique();

                    b.ToTable("INCOME_EXPNECE");
                });

            modelBuilder.Entity("PersonalFinances.Models.Project", b =>
                {
                    b.Property<decimal>("ProjectId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("PROJECT_ID");

                    b.Property<DateTime>("ProjectBegin")
                        .HasColumnType("date")
                        .HasColumnName("PROJECT_BEGIN");

                    b.Property<string>("ProjectClient")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PROJECT_CLIENT");

                    b.Property<string>("ProjectDescription")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("PROJECT_DESCRIPTION");

                    b.Property<DateTime>("ProjectEnd")
                        .HasColumnType("date")
                        .HasColumnName("PROJECT_END");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PROJECT_NAME");

                    b.Property<decimal?>("ProjectPayPerHour")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("PROJECT_PAY_PER_HOUR");

                    b.Property<decimal>("ProjectStatus")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("PROJECT_STATUS");

                    b.HasKey("ProjectId");

                    b.HasIndex(new[] { "ProjectName" }, "IDX_PROJECT_UQ")
                        .IsUnique();

                    b.HasIndex(new[] { "ProjectStatus" }, "IX_PROJECTS_PROJECT_STATUS");

                    b.ToTable("PROJECTS");
                });

            modelBuilder.Entity("PersonalFinances.Models.ProjectStatus", b =>
                {
                    b.Property<decimal>("PstatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("PSTATUS_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PstatusName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PSTATUS_NAME");

                    b.HasKey("PstatusId");

                    b.HasIndex(new[] { "PstatusName" }, "IDX_PROJECT_STATUS_UQ")
                        .IsUnique();

                    b.ToTable("PROJECT_STATUS");
                });

            modelBuilder.Entity("PersonalFinances.Models.ProjectTask", b =>
                {
                    b.Property<decimal>("TaskId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("TASK_ID");

                    b.Property<decimal>("ExpretId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("EXPRET_ID");

                    b.Property<decimal>("ProjectId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("PROJECT_ID");

                    b.Property<string>("TasDeliverables")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("TAS_DELIVERABLES");

                    b.Property<DateTime>("TaskBegin")
                        .HasColumnType("date")
                        .HasColumnName("TASK_BEGIN");

                    b.Property<string>("TaskDescription")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("TASK_DESCRIPTION");

                    b.Property<DateTime>("TaskEnd")
                        .HasColumnType("date")
                        .HasColumnName("TASK_END");

                    b.Property<decimal?>("TaskHours")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("TASK_HOURS");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TASK_NAME");

                    b.Property<string>("TaskPriority")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("TASK_PRIORITY")
                        .IsFixedLength(true);

                    b.Property<decimal?>("TaskReady")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("TASK_READY");

                    b.Property<decimal>("TaskStatus")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("TASK_STATUS");

                    b.HasKey("TaskId");

                    b.HasIndex(new[] { "ProjectId", "TaskName" }, "IDX_PROJECT_TASK")
                        .IsUnique();

                    b.HasIndex(new[] { "ExpretId" }, "IX_PROJECT_TASKS_EXPRET_ID");

                    b.HasIndex(new[] { "TaskStatus" }, "IX_PROJECT_TASKS_TASK_STATUS");

                    b.ToTable("PROJECT_TASKS");
                });

            modelBuilder.Entity("PersonalFinances.Models.TaskStatus", b =>
                {
                    b.Property<decimal>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("STATUS_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("STATUS_NAME");

                    b.HasKey("StatusId");

                    b.HasIndex(new[] { "StatusName" }, "IDX_TASK_STATUS_UQ")
                        .IsUnique();

                    b.ToTable("TASK_STATUS");
                });

            modelBuilder.Entity("PersonalFinances.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdentificationNumber")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("SurrName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("PersonalFinances.Models.Address", b =>
                {
                    b.HasOne("PersonalFinances.Models.Client", "Client")
                        .WithMany("Addresses")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_ADDRESS_REFERENCE_CLIENT")
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PersonalFinances.Models.Dossier", b =>
                {
                    b.HasOne("PersonalFinances.Models.Client", "Client")
                        .WithMany("Dossiers")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_DOSSIER_REFERENCE_CLIENT")
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PersonalFinances.Models.DossierDetail", b =>
                {
                    b.HasOne("PersonalFinances.Models.Dossier", "DossierNoNavigation")
                        .WithMany("DossierDetails")
                        .HasForeignKey("DossierNo")
                        .HasConstraintName("FK_DOSSIER__REFERENCE_DOSSIER")
                        .IsRequired();

                    b.HasOne("PersonalFinances.Models.IncomeExpnece", "Incexp")
                        .WithMany("DossierDetails")
                        .HasForeignKey("IncexpId")
                        .HasConstraintName("FK_DOSSIER__REFERENCE_INCOME_E")
                        .IsRequired();

                    b.Navigation("DossierNoNavigation");

                    b.Navigation("Incexp");
                });

            modelBuilder.Entity("PersonalFinances.Models.Project", b =>
                {
                    b.HasOne("PersonalFinances.Models.ProjectStatus", "ProjectStatusNavigation")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectStatus")
                        .HasConstraintName("FK_PROJECTS_REFERENCE_PROJECT_")
                        .IsRequired();

                    b.Navigation("ProjectStatusNavigation");
                });

            modelBuilder.Entity("PersonalFinances.Models.ProjectTask", b =>
                {
                    b.HasOne("PersonalFinances.Models.Expert", "Expret")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ExpretId")
                        .HasConstraintName("FK_PROJECT__REFERENCE_EXPERTS")
                        .IsRequired();

                    b.HasOne("PersonalFinances.Models.Project", "Project")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_PROJECT__REFERENCE_PROJECTS")
                        .IsRequired();

                    b.HasOne("PersonalFinances.Models.TaskStatus", "TaskStatusNavigation")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("TaskStatus")
                        .HasConstraintName("FK_PROJECT__REFERENCE_TASK_STA")
                        .IsRequired();

                    b.Navigation("Expret");

                    b.Navigation("Project");

                    b.Navigation("TaskStatusNavigation");
                });

            modelBuilder.Entity("PersonalFinances.Models.Client", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Dossiers");
                });

            modelBuilder.Entity("PersonalFinances.Models.Dossier", b =>
                {
                    b.Navigation("DossierDetails");
                });

            modelBuilder.Entity("PersonalFinances.Models.Expert", b =>
                {
                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("PersonalFinances.Models.IncomeExpnece", b =>
                {
                    b.Navigation("DossierDetails");
                });

            modelBuilder.Entity("PersonalFinances.Models.Project", b =>
                {
                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("PersonalFinances.Models.ProjectStatus", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("PersonalFinances.Models.TaskStatus", b =>
                {
                    b.Navigation("ProjectTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
