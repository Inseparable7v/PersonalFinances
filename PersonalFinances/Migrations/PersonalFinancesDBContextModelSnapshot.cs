// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersonalFinances.Models;

namespace PersonalFinances.Migrations
{
    [DbContext(typeof(PersonalFinancesDBContext))]
    partial class PersonalFinancesDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Latin1_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PersonalFinances.Models.Expert", b =>
                {
                    b.Property<decimal>("ExpretId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("EXPRET_ID");

                    b.Property<string>("ExpertLastname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EXPERT_LASTNAME");

                    b.Property<string>("ExpertName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EXPERT_NAME");

                    b.Property<string>("ExpertSurname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EXPERT_SURNAME");

                    b.Property<string>("ExpertType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("EXPERT_TYPE")
                        .IsFixedLength(true);

                    b.HasKey("ExpretId");

                    b.ToTable("EXPERTS");
                });

            modelBuilder.Entity("PersonalFinances.Models.Project", b =>
                {
                    b.Property<decimal>("ProjectId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("PROJECT_ID");

                    b.Property<DateTime>("ProjectBegin")
                        .HasColumnType("date")
                        .HasColumnName("PROJECT_BEGIN");

                    b.Property<string>("ProjectClient")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PROJECT_CLIENT");

                    b.Property<string>("ProjectDescription")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("PROJECT_DESCRIPTION");

                    b.Property<DateTime>("ProjectEnd")
                        .HasColumnType("date")
                        .HasColumnName("PROJECT_END");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PROJECT_NAME");

                    b.Property<decimal?>("ProjectPayPerHour")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("PROJECT_PAY_PER_HOUR");

                    b.Property<decimal>("ProjectStatus")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("PROJECT_STATUS");

                    b.HasKey("ProjectId");

                    b.HasIndex("ProjectStatus");

                    b.HasIndex(new[] { "ProjectName" }, "IDX_PROJECT_UQ")
                        .IsUnique();

                    b.ToTable("PROJECTS");
                });

            modelBuilder.Entity("PersonalFinances.Models.ProjectStatus", b =>
                {
                    b.Property<decimal>("PstatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("PSTATUS_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PstatusName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PSTATUS_NAME");

                    b.HasKey("PstatusId");

                    b.HasIndex(new[] { "PstatusName" }, "IDX_PROJECT_STATUS_UQ")
                        .IsUnique();

                    b.ToTable("PROJECT_STATUS");
                });

            modelBuilder.Entity("PersonalFinances.Models.ProjectTask", b =>
                {
                    b.Property<decimal>("TaskId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("TASK_ID");

                    b.Property<decimal>("ExpretId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("EXPRET_ID");

                    b.Property<decimal>("ProjectId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("PROJECT_ID");

                    b.Property<string>("TasDeliverables")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("TAS_DELIVERABLES");

                    b.Property<DateTime>("TaskBegin")
                        .HasColumnType("date")
                        .HasColumnName("TASK_BEGIN");

                    b.Property<string>("TaskDescription")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("TASK_DESCRIPTION");

                    b.Property<DateTime>("TaskEnd")
                        .HasColumnType("date")
                        .HasColumnName("TASK_END");

                    b.Property<decimal?>("TaskHours")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("TASK_HOURS");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TASK_NAME");

                    b.Property<string>("TaskPriority")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("TASK_PRIORITY")
                        .IsFixedLength(true);

                    b.Property<decimal?>("TaskReady")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("TASK_READY");

                    b.Property<decimal>("TaskStatus")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("TASK_STATUS");

                    b.HasKey("TaskId");

                    b.HasIndex("ExpretId");

                    b.HasIndex("TaskStatus");

                    b.HasIndex(new[] { "ProjectId", "TaskName" }, "IDX_PROJECT_TASK")
                        .IsUnique();

                    b.ToTable("PROJECT_TASKS");
                });

            modelBuilder.Entity("PersonalFinances.Models.TaskStatus", b =>
                {
                    b.Property<decimal>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("STATUS_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("STATUS_NAME");

                    b.HasKey("StatusId");

                    b.HasIndex(new[] { "StatusName" }, "IDX_TASK_STATUS_UQ")
                        .IsUnique();

                    b.ToTable("TASK_STATUS");
                });

            modelBuilder.Entity("PersonalFinances.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdentificationNumber")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("SurrName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("PersonalFinances.Models.Project", b =>
                {
                    b.HasOne("PersonalFinances.Models.ProjectStatus", "ProjectStatusNavigation")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectStatus")
                        .HasConstraintName("FK_PROJECTS_REFERENCE_PROJECT_")
                        .IsRequired();

                    b.Navigation("ProjectStatusNavigation");
                });

            modelBuilder.Entity("PersonalFinances.Models.ProjectTask", b =>
                {
                    b.HasOne("PersonalFinances.Models.Expert", "Expret")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ExpretId")
                        .HasConstraintName("FK_PROJECT__REFERENCE_EXPERTS")
                        .IsRequired();

                    b.HasOne("PersonalFinances.Models.Project", "Project")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_PROJECT__REFERENCE_PROJECTS")
                        .IsRequired();

                    b.HasOne("PersonalFinances.Models.TaskStatus", "TaskStatusNavigation")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("TaskStatus")
                        .HasConstraintName("FK_PROJECT__REFERENCE_TASK_STA")
                        .IsRequired();

                    b.Navigation("Expret");

                    b.Navigation("Project");

                    b.Navigation("TaskStatusNavigation");
                });

            modelBuilder.Entity("PersonalFinances.Models.Expert", b =>
                {
                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("PersonalFinances.Models.Project", b =>
                {
                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("PersonalFinances.Models.ProjectStatus", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("PersonalFinances.Models.TaskStatus", b =>
                {
                    b.Navigation("ProjectTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
